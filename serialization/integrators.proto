syntax = "proto2";

import "serialization/geometry.proto";
import "serialization/numerics.proto";
import "serialization/quantities.proto";

package principia.serialization;

option cc_enable_arenas = true;

message Integrator {
  extensions 3000 to 3999;  // Last used: 3001.
}

message AdaptiveStepSizeIntegrator {
  extend Integrator {
    optional AdaptiveStepSizeIntegrator extension = 3000;
  }
  enum Kind {
    DORMAND_ELMIKKAWY_PRINCE_1986_RKN_434FM = 1;
    DORMAND_PRINCE_1986_RK_547FC = 3;
    FINE_1987_RKNG_34 = 2;
  }
  required Kind kind = 1;
}

message FixedStepSizeIntegrator {
  extend Integrator {
    optional FixedStepSizeIntegrator extension = 3001;
  }
  enum Kind {
    BLANES_MOAN_2002_S6 = 36;
    BLANES_MOAN_2002_S10 = 37;
    BLANES_MOAN_2002_SRKN_6B = 1;
    BLANES_MOAN_2002_SRKN_11B = 2;
    BLANES_MOAN_2002_SRKN_14A = 3;
    CANDY_ROZMUS_1991_FOREST_RUTH_1990 = 26;
    MCLACHLAN_1995_S2 = 29;
    MCLACHLAN_1995_S4 = 31;
    MCLACHLAN_1995_S5 = 32;
    MCLACHLAN_1995_SB3A_4 = 4;
    MCLACHLAN_1995_SB3A_5 = 5;
    MCLACHLAN_1995_SS5 = 30;
    MCLACHLAN_1995_SS9 = 33;
    MCLACHLAN_1995_SS15 = 34;
    MCLACHLAN_1995_SS17 = 35;
    MCLACHLAN_ATELA_1992_ORDER_2_OPTIMAL = 27;
    MCLACHLAN_ATELA_1992_ORDER_3_OPTIMAL = 28;
    MCLACHLAN_ATELA_1992_ORDER_4_OPTIMAL = 6;
    MCLACHLAN_ATELA_1992_ORDER_5_OPTIMAL = 7;
    NEWTON_DELAMBRE_STORMER_VERLET_LEAPFROG = 15;
    OKUNBOR_SKEEL_1994_ORDER_6_METHOD_13 = 8;
    QUINLAN_1999_ORDER_8A = 9;
    QUINLAN_1999_ORDER_8B = 10;
    QUINLAN_TREMAINE_1990_ORDER_8 = 11;
    QUINLAN_TREMAINE_1990_ORDER_10 = 12;
    QUINLAN_TREMAINE_1990_ORDER_12 = 13;
    QUINLAN_TREMAINE_1990_ORDER_14 = 14;
    RUTH_1983 = 16;
    SUZUKI_1990 = 17;
    YOSHIDA_1990_ORDER_6A = 18;
    YOSHIDA_1990_ORDER_6B = 19;
    YOSHIDA_1990_ORDER_6C = 20;
    YOSHIDA_1990_ORDER_8A = 21;
    YOSHIDA_1990_ORDER_8B = 22;
    YOSHIDA_1990_ORDER_8C = 23;
    YOSHIDA_1990_ORDER_8D = 24;
    YOSHIDA_1990_ORDER_8E = 25;
  }
  enum CompositionMethod {
    BA = 0;   // Neither b₀ nor aᵣ vanishes.
    ABA = 1;  // b₀ = 0.
    BAB = 2;  // aᵣ = 0.
  }
  required Kind kind = 1;
  optional CompositionMethod composition_method = 2;  // Only for SRKN.
}

message IntegratorInstance {
  extensions 7000 to 7999;  // Last used: 7001

  required SystemState current_state = 1;
}

message AdaptiveStepSizeIntegratorInstance {
  extend IntegratorInstance {
    optional AdaptiveStepSizeIntegratorInstance extension = 7001;
  }
  extensions 9000 to 9999;  // Last used: 9001
  message Step {
    oneof step {
      double double = 1;
      Quantity quantity = 2;
    }
  }
  message Parameters {
    optional Quantity first_time_step = 1;  // Pre-Hesse.
    optional Step first_step = 5;  // Added in Hesse.
    required double safety_factor = 2;
    required int64 max_steps = 3;
    optional bool last_step_is_exact = 4;  // Added in Cartan.
  }
  required Parameters parameters = 1;
  required AdaptiveStepSizeIntegrator integrator = 2;
  optional Quantity time_step = 3;  // Added in Cartan, pre-Hesse.
  optional Step step = 5;  // Added in Hesse.
  optional bool first_use = 4;
}

message EmbeddedExplicitRungeKuttaNystromIntegratorInstance {
  extend AdaptiveStepSizeIntegratorInstance {
    optional EmbeddedExplicitRungeKuttaNystromIntegratorInstance
        extension = 9000;
  }
}

message EmbeddedExplicitGeneralizedRungeKuttaNystromIntegratorInstance {
  extend AdaptiveStepSizeIntegratorInstance {
    optional EmbeddedExplicitGeneralizedRungeKuttaNystromIntegratorInstance
        extension = 9001;
  }
}

message ExplicitLinearMultistepIntegratorInstance {
  extend FixedStepSizeIntegratorInstance {
    optional ExplicitLinearMultistepIntegratorInstance extension = 8002;
  }
  //TODO(phl)Add more
}

message FixedStepSizeIntegratorInstance {
  extend IntegratorInstance {
    optional FixedStepSizeIntegratorInstance extension = 7000;
  }
  extensions 8000 to 8999;  // Last used: 8001
  required Quantity step = 1;
  required FixedStepSizeIntegrator integrator = 2;
}

message SymmetricLinearMultistepIntegratorInstance {
  extend FixedStepSizeIntegratorInstance {
    optional SymmetricLinearMultistepIntegratorInstance extension = 8000;
  }
  message Step {
    message Acceleration {
      oneof acceleration {
        Quantity quantity = 1;
        Multivector multivector = 2;
      }
    }
    repeated DoublePrecision displacements = 1;
    repeated Acceleration accelerations = 2;
    required DoublePrecision time = 3;
  }
  repeated Step previous_steps = 1;
  // Added in Cartan.
  optional int32 startup_step_index = 2;
}

message SymplecticRungeKuttaNystromIntegratorInstance {
  extend FixedStepSizeIntegratorInstance {
    optional SymplecticRungeKuttaNystromIntegratorInstance extension = 8001;
  }
}

message SystemState {
  repeated DoublePrecision position = 1;
  repeated DoublePrecision velocity = 2;
  required DoublePrecision time = 3;
}
